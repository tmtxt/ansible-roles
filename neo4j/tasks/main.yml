---
- name: install neo4j dependencies
  sudo: yes
  apt: name={{ item }} state=present update_cache=yes force=yes
  with_items:
    - python-urllib3
    - libpython-stdlib

- name: Change Soft Open File Limit
  sudo: yes
  lineinfile: >-
    dest=/etc/security/limits.conf
    insertbefore="^# End of file$"
    line="{{neo4j_user}} soft nofile 40000"
    state=present

- name: Change Hard Open File Limit
  sudo: yes
  lineinfile: >-
    dest=/etc/security/limits.conf
    insertbefore="^# End of file$"
    line="{{neo4j_user}} hard nofile 40000"
    state=present

- name: Change Hard Open File Limit
  sudo: yes
  lineinfile: >-
    dest=/etc/pam.d/su
    insertafter="^# session required pam_limits.so$"
    line="session required pam_limits.so"
    state=present

- name: check if neo4j is already installed
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  stat: path={{neo4j_path}}/neo4j-community-{{neo4j_version}}
  register: neo4j_path_stat
  changed_when: False

- name: download neo4j community version
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  when: not neo4j_path_stat.stat.exists
  get_url: >-
    url=http://dist.neo4j.org/neo4j-community-{{ neo4j_version }}-unix.tar.gz
    dest=/tmp/neo4j-community-{{ neo4j_version }}-unix.tar.gz

- name: create neo4j folder if not exist
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  when: not neo4j_path_stat.stat.exists
  file: path={{neo4j_path}} state=directory

- name: extract neo4j
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  when: not neo4j_path_stat.stat.exists
  unarchive: >-
    src=/tmp/neo4j-community-{{ neo4j_version }}-unix.tar.gz
    dest={{neo4j_path}}
    copy=no

- name: delete neo4j archive file
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  when: not neo4j_path_stat.stat.exists
  file: path=/tmp/neo4j-community-{{ neo4j_version }}-unix.tar.gz state=absent

- name: check neo4j server status
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  command: ./neo4j status
  args:
    chdir: "{{neo4j_path}}/neo4j-community-{{neo4j_version}}/bin"
  register: neo4j_server_status
  changed_when: neo4j_server_status.stdout.find('Neo4j Server is not running') != -1
  ignore_errors: True

- name: generate config file for neo4j
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  template: >-
    src=neo4j-server.properties
    dest={{neo4j_path}}/neo4j-community-{{neo4j_version}}/conf/neo4j-server.properties
  register: neo4j_config_file

- name: restart neo4j server
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  command: nohup ./neo4j restart
  ignore_errors: True
  args:
    chdir: "{{neo4j_path}}/neo4j-community-{{neo4j_version}}/bin"
  when: neo4j_server_status.changed or neo4j_config_file.changed

- name: check if neo4j password is generated already
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  stat: path={{neo4j_password_file}}
  register: neo4j_password_stat
  when: neo4j_random_password
  changed_when: False

- name: generate neo4j password
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  when: neo4j_random_password and not neo4j_password_stat.stat.exists
  shell: date | md5sum | head -c 32 > {{neo4j_password_file}}

- name: register neo4j password
  sudo: yes
  sudo_user: "{{neo4j_user}}"
  when: neo4j_random_password
  command: cat {{neo4j_password_file}}
  register: neo4j_password_data
  changed_when: False

- set_fact:
    neo4j_password: "{{neo4j_password_data.stdout}}"
  when: neo4j_random_password

- name: generate base64 string for default password
  shell: echo -n "neo4j:neo4j" | base64
  register: neo4j_default_password
  changed_when: False

- name: change neo4j password
  command: "curl -H \"Authorization: Basic {{neo4j_default_password.stdout}}\" -H \"Accept: application/json; charset=UTF-8\" -H \"Content-Type: application/json\" -X POST -d '{\"password\":\"{{neo4j_password}}\" }' http://localhost:{{neo4j_port}}/user/neo4j/password"
  register: neo4j_change_password
  changed_when: neo4j_change_password.stdout.find('Invalid username or password') == -1
